import telebot
import sqlite3
import pytz
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
import os

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("mood_tracker.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    timezone TEXT DEFAULT 'UTC',
    start_hour INTEGER DEFAULT 8,
    end_hour INTEGER DEFAULT 22,
    interval_hours INTEGER DEFAULT 3
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS sessions (
    session_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    start_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    end_time DATETIME,
    duration INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS responses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    session_id INTEGER,
    question_id INTEGER,
    answer TEXT,
    start_time DATETIME,
    end_time DATETIME,
    duration INTEGER
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text TEXT NOT NULL,
    active INTEGER DEFAULT 1,
    order_num INTEGER UNIQUE NOT NULL
)
""")

conn.commit()

# --- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞–º–∏ ---
def seed_questions():
    questions = [
        ("–ß—Ç–æ —è —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É—é? –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏—Å–ø—ã—Ç—ã–≤–∞—é?", 1),
        ("–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –º–æ–∏–º —Ç–µ–ª–æ–º, –∫–æ–≥–¥–∞ —è –æ—â—É—â–∞—é —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ?", 2),
        ("–ß—Ç–æ —è —Ö–æ—Ç–µ–ª –±—ã –∏–∑–º–µ–Ω–∏—Ç—å? –ß—Ç–æ —è —Ö–æ—á—É –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ?", 3),
        ("–ß—Ç–æ –µ—â–µ —è —á—É–≤—Å—Ç–≤—É—é?", 4),
        ("–ö–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ?", 5),
        ("–ö–∞–∫ —è –º–æ–≥—É –¥–æ–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –º—ã—Å–ª–∏ –∞–¥—Ä–µ—Å–∞—Ç—É?", 6)
    ]
    cursor.executemany("INSERT OR IGNORE INTO questions (text, order_num) VALUES (?, ?)", questions)
    conn.commit()

seed_questions()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)
scheduler = BackgroundScheduler()
scheduler.start()

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def save_user_settings(user_id, timezone="UTC", start_hour=8, end_hour=22, interval=3):
    cursor.execute("""
    INSERT INTO users (user_id, timezone, start_hour, end_hour, interval_hours)
    VALUES (?, ?, ?, ?, ?)
    ON CONFLICT(user_id) DO UPDATE SET timezone=?, start_hour=?, end_hour=?, interval_hours=?
    """, (user_id, timezone, start_hour, end_hour, interval, timezone, start_hour, end_hour, interval))
    conn.commit()

def get_user_settings(user_id):
    cursor.execute("SELECT timezone, start_hour, end_hour, interval_hours FROM users WHERE user_id=?", (user_id,))
    return cursor.fetchone()

def start_session(user_id):
    cursor.execute("INSERT INTO sessions (user_id, start_time) VALUES (?, CURRENT_TIMESTAMP)", (user_id,))
    conn.commit()
    return cursor.lastrowid

def end_session(session_id):
    cursor.execute("""
    UPDATE sessions
    SET end_time = CURRENT_TIMESTAMP,
        duration = (strftime('%s', CURRENT_TIMESTAMP) - strftime('%s', start_time))
    WHERE session_id = ?
    """, (session_id,))
    conn.commit()

def save_response(session_id, question_id, answer, start_time, end_time):
    duration = (end_time - start_time).seconds
    cursor.execute("""
    INSERT INTO responses (session_id, question_id, answer, start_time, end_time, duration)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (session_id, question_id, answer, start_time, end_time, duration))
    conn.commit()

def ask_next_question(user_id, session_id, current_order=0):
    cursor.execute("SELECT id, text FROM questions WHERE active=1 AND order_num > ? ORDER BY order_num LIMIT 1",
                   (current_order,))
    next_question = cursor.fetchone()

    if next_question:
        question_id, question_text = next_question
        bot.send_message(user_id, question_text)
        start_time = datetime.now()
        bot.register_next_step_handler_by_chat_id(user_id, lambda message: save_answer_and_continue(user_id, session_id,
                                                                                                    question_id,
                                                                                                    message,
                                                                                                    start_time))
    else:
        end_session(session_id)
        bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!")

def save_answer_and_continue(user_id, session_id, question_id, message, start_time):
    end_time = datetime.now()
    save_response(session_id, question_id, message.text, start_time, end_time)
    ask_next_question(user_id, session_id, question_id)

def ask_questions(user_id, force=False):
    user_settings = get_user_settings(user_id)
    if not user_settings:
        return

    timezone, start_hour, end_hour, interval = user_settings
    user_tz = pytz.timezone(timezone)
    current_hour = datetime.now(user_tz).hour

    if force or (start_hour <= current_hour < end_hour):
        session_id = start_session(user_id)
        ask_next_question(user_id, session_id)
    else:
        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –¥–ª—è {user_id}, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å {current_hour}:00 –≤ –µ–≥–æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üòä –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!\n\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\nüìå /settings ‚Äì –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–æ–≤.\nüìå /ask ‚Äì –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n–ü–æ–ø—Ä–æ–±—É–π! üöÄ")

@bot.message_handler(commands=['settings'])
def settings_message(message):
    bot.send_message(message.chat.id,
                     "–û—Ç–ø—Ä–∞–≤—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å, –ß–∞—Å –Ω–∞—á–∞–ª–∞, –ß–∞—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è, –ò–Ω—Ç–µ—Ä–≤–∞–ª (–≤ —á–∞—Å–∞—Ö).\n–ü—Ä–∏–º–µ—Ä: Asia/Yekaterinburg, 8, 22, 3\n\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones")

@bot.message_handler(func=lambda message: "," in message.text)
def save_settings(message):
    try:
        user_id = message.chat.id
        timezone, start_hour, end_hour, interval = message.text.split(",")
        save_user_settings(user_id, timezone.strip(), int(start_hour), int(end_hour), int(interval))
        bot.send_message(user_id, "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–≤–æ–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞: {e}")

@bot.message_handler(commands=['ask'])
def manual_question(message):
    ask_questions(message.chat.id, force=True)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling()
